import os
import sys
import time


def create_named_pipe(pipe_name):  #methode zu Generierung named Pipes
    if not os.path.exists(pipe_name): #Schaut nach, ob eine Pipe mit diesem Namen existiert
        os.mkfifo(pipe_name)  #Generierung der Pipe mit dem gegebenen Namen mit mkfifo

def main():
    try:
        player_count = int(input("Enter the number of players: ")) #Angabe zu Anzahl der Spieler

        base_pipe_name = "game_pipe" #Name, unter dem die Pipes zu finden sind
        pipe_paths = [f"{base_pipe_name}{i}" for i in range(player_count)] #Name, unter dem die Pipes zu finden sind, aber mit Nummerierung, damit nicht die Prozesse auf die gleiche Pipe zugreifen
        
        for path in pipe_paths:
            create_named_pipe(path)  #Methode zu Generierung der Pipes
        
        for i in range(player_count):  #Generierung der Kinder Prozesse
            pid = os.fork()  #Generierung der Kinder Prozesse
            if pid == 0:
                time.sleep(1)
                Spiel(pipe_paths[i], pipe_paths) #Ausführen der Kinder Prozesse
                sys.exit() #Kinder Prozess beenden ihre Prozesse

        if pid > 0:
            time.sleep(30)
            os.wait() #Vater Prozess wartet bis die Kinder Prozesse zu Ende sind

    except ValueError:
        print("Please enter a valid number of players.") #Falls Buchstaben anstatt zahlen eingegeben werden
    except KeyboardInterrupt:
        print("Game interrupted.") #Falls Keyboard Interrupt
    finally:
        for path in pipe_paths:
            if os.path.exists(path):
                os.unlink(path) #Löschen der Pipes, falls etwas da zwischen passiert
